---

- hosts: database
  become: true
  vars:
    msi_mysql_root_pass: ''

  tasks:

  # - name: Install Utility software
  #   apt: name={{item}} state=latest update_cache=yes
  #   with_items:
  #     - software-properties-common
  #     - python3-mysqldb

  #   # - name: Add apt key
  #   #   command: apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xcbcb082a1bb943db

  #   # - name: Add MariaDB Repo
  #   #   apt_repository:
  #   #     filename: MariaDB-10.2
  #   #     repo: deb [arch=amd64,i386] http://mirror.rackspeed.de/mariadb.org/repo/10.2/ubuntu jammy main
  #   #     state: present

  #   # - name: Get Key for Percona Repo
  #   #   command: apt-key adv --keyserver keys.gnupg.net --recv-keys 1C4CBDCDCD2EFD2A

  #   # - name: Add Percona Tools Repo
  #   #   apt_repository:
  #   #     filename: Percona
  #   #     repo: deb http://repo.percona.com/apt trusty main
  #   #     state: present

  # - name: Install MariaDB Packages
  #   apt: name={{item}} state=latest default_release=jammy update_cache=yes
  #   with_items:
  #     - mariadb-client
  #     - mariadb-common
  #     - mariadb-server

  #   # - name: Install Percona Software
  #   #   apt: name={{item}} state=latest force=yes
  #   #   with_items:
  #   #     - percona-toolkit
  #   #     - percona-xtrabackup
  #   #     - percona-nagios-plugins

  #   # - name: Create MariaDB Directories
  #   #   file: path=/data/{{item}} state=directory owner=mysql group=mysql recurse=yes
  #   #   with_items:
  #   #     - db
  #   #     - log

  #   # - name: Write new configuration file
  #   #   template:
  #   #     src: /home/vagrant/ansible/templates/mysql/my.cnf
  #   #     dest: /etc/mysql/my.cnf
  #   #     owner: mysql
  #   #     group: mysql
  #   #     mode: '0600'
  #   #     backup: yes

  #   # - name: Count files in /data/db
  #   #   find:
  #   #     path=/data/db
  #   #     patterns='\*'
  #   #   register: db_files

  #   # - name: Run mysql_install_db only if /data/db is empty
  #   #   command: mysql_install_db --datadir=/data/db
  #   #   when: db_files.matched|int == 0

  # - name: Start MariaDB
  #   service:
  #     name=mysql
  #     state=started

  # - name: secure mariadb
  #   become: yes
  #   expect:
  #     command: mysql_secure_installation
  #     responses:
  #       'Enter current password for root': ''
  #       'Set root password': 'y'
  #       'New password': "{{password}}"
  #       'Re-enter new password': "{{password}}"
  #       'Remove anonymous users': 'y'
  #       'Disallow root login remotely': 'y'
  #       'Remove test database': 'y'
  #       'Reload privilege tables now': 'y'
  #     timeout: 1
  #   register: secure_mariadb
  #   failed_when: "'... Failed!' in secure_mariadb.stdout_lines"
  
  - name: 1. set mysql root pass
    mysql_user:
        login_user: root
        login_password: "{{ msi_mysql_root_pass }}"
        user: root
        host_all: yes
        password: "{{password}}"
  - name: 2. disable remote root login
    mysql_user:
        login_user: root
        login_password: "{{password}}"
        user: root
        host: "{{ ansible_fqdn | lower }}"
        state: absent
  - name: 3. remove anonymous users
    mysql_user:
        login_user: root
        login_password: "{{password}}"
        user: ''
        host_all: yes
        state: absent
  - name: 4. remove test database
    mysql_db: 
        login_user: root
        login_password: "{{password}}"
        db: test
        state: absent
    register: remove_testdb
  - name: 4.1 remove test database priviledges
    block:
      - shell: >
          mysql -u root -p"{{password}}" 
          -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%'"
      - shell: mysql -u root -p"{{password}}" -e "FLUSH PRIVILEGES"
    when: remove_testdb|changed


  # - name: Is root password set?
  #   command: mysql -u root --execute "SELECT NOW()"
  #   register: is_root_password_set
  #   ignore_errors: yes

  # - name: Delete anonymous users
  #   mysql_user:
  #     user=""
  #     state="absent"
  #   when: is_root_password_set.rc == 0

  # - name: Generate mysql root password
  #   shell: tr -d -c "a-zA-Z0-9" \< /dev/urandom | head -c 10
  #   register: mysql_root_password
  #   when: is_root_password_set.rc == 0

  # - name: Set root password
  #   mysql_user:
  #     user=root
  #     password="{{mysql_root_password.stdout}}"
  #     host=localhost
  #   when: is_root_password_set.rc == 0

  # - name: Set root password for other hosts
  #   mysql_user:
  #     user=root
  #     password="{{mysql_root_password.stdout}}"
  #     host="{{item}}"
  #     login_user="root"
  #     login_host="localhost"
  #     login_password="{{mysql_root_password.stdout}}"
  #   when: is_root_password_set.rc == 0
  #   with_items: [ "127.0.0.1", "::1"]

  # - name: Inform user of mysql root password
  #   debug:
  #     msg: "MariaDB root password was set to {{mysql_root_password.stdout}}"
  #   when: is_root_password_set.rc == 0

  - name: Create myapp database
    mysql_db:
      name: myapp
      login_user: root
      login_password: "{{password}}"
      login_host: localhost
      state: present
    # when: is_root_password_set.rc == 0

  # - name: Generate myapp\_rw password
  #   shell: tr -d -c "a-zA-Z0-9" < /dev/urandom | head -c 10
  #   register: mysql_myapp_rw_password
  #   when: is_root_password_set.rc == 0

  - name: Create user for myapp db
    mysql_user:
      name: myapp_rw
      password: "{{password}}"
      priv: myapp.*:SELECT,INSERT,UPDATE,DELETE
      login_user:
      root login_password: "{{password}}"
      state: present
    # when: is_root_password_set.rc == 0